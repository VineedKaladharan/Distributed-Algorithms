Hello everybody!

Last week we introduced
the round elimination technique,

but we didn't yet see that many
exciting applications of it.

We showed that some problems
require, for example,

at least two rounds,
but usually we care

about asymptotics,
not so much about constants.

Now we will get to
the real applications

of the round elimination
technique.

One of the highlights is this:

with round elimination we can
prove that a problem called

sinkless orientation
cannot be solved fast.

For example,

if we look at the deterministic
port-numbering model, then it is

not possible to solve it
faster than in logarithmic time.

And this result has got
tons of consequences.

Many other problems are known

to be at least as hard to solve
as sinkless orientation.

And this idea is also guiding us
when we define

the sinkless orientation
problem.

We want to make it
as simple as possible,

so that it can be reduced
to many other problems.

And then once we show that
sinkless orientation is hard,

we know that all these other
problems are hard as well.

So let's now first define
the sinkless orientation problem.

It's enough for now to
consider 3-regular trees

in which all nodes have
degree 1 or 3.

And just like last week,
we assume that the nodes

are split in two classes,
active and passive.

So we have a 2-coloring
of the tree.

And the problem is simply this:
orient the edges

so that all degree-3 nodes
have at least one outgoing edge.

So this is good.

And so is this.

But this is wrong,

we have here got a node that
doesn't have any outgoing edges.

Now this problem is easy to
solve in logarithmic time.

Basically, within
a logarithmic distance

there has to be at least
one leaf node.

And if everyone points towards
the nearest leaf node,

we get a sinkless orientation.

But the interesting thing is that
this is the best that you can do.

We will show it this week

for deterministic algorithms
in the port-numbering model,

but one can use similar ideas
to show that the same problem

is hard to solve also
in the LOCAL model,

and also for randomized
algorithms.

Now why does that matter?

It turns out that
many relevant problems

are at least as hard as
the sinkless orientation problem.

Let's give just
one simple example.

Let's look at graph coloring.

We already know that if we have
a graph of maximum degree 2,

that is, a path or cycle,

then vertex coloring with
3 colors can be done fast

in the LOCAL model,

while coloring with 2 colors
is much harder.

Now what happens if we look at,

for example,
graphs of maximum degree 4?

Again, we know that

vertex coloring with 5 colors
can be done fast.

Remember that this is
Delta+1 coloring,

something we learned to do fast
in week 4 of this course.

But is this the best
that we can do?

Could we also find
a 4-coloring fast?

Well, if we could find

a 4-coloring of the vertices
in graphs of maximum degree 4,

we could also find a 4-coloring
of the edges in 3-regular trees.

Like this.
Take a 3-regular tree.

Switch to the line graph:

edges become nodes, and adjacent
edges become adjacent nodes.

This is a graph of
degree at most 4.

So we can find
a 4-coloring of the vertices.

And this will directly give

a 4-coloring of the edges
of the original tree.

But now this is something
we could use

to find a sinkless orientation!

Let's put back active
and passive nodes here.

And then, just pick two colors,
like orange and blue,

and orient them away from
the active nodes.

And orient the remaining
two color classes

towards the active nodes.

Note that degree-3 nodes
were incident to

at least one of
orange and blue.

And at least one of
green and black.

So they got at least
one outgoing edge.

So it's a sinkless orientation.

So if we now know that

sinkless orientation
is hard to solve,

we also know that

edge coloring of 3-regular trees
with 4 colors is hard to solve.

And therefore 4-coloring
the vertices in graphs

of maximum degree 4
is also hard to solve,

exactly what we wanted to know.

How do we show that sinkless
orientation is a hard problem?

We apply the round elimination
technique,

familiar from the previous week.

Remember that round elimination

turns a given problem
to another problem

that can be solved exactly
one round faster.

But if you do this repeatedly,

starting from the sinkless
orientation problem,

you will quickly reach
a fixed point!

You get a contradiction:
the output problem can be solved

exactly one round faster
than itself.

Which is clearly
a contradiction.

And the only escape is that
round elimination fails here.

And why would it fail?

It turns out that the only
possibility is that

this problem cannot be
solved fast.

And hence sinkless orientation
cannot be solved fast, either.
